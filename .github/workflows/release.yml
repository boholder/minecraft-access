name: Publish on GitHub, CurseForge, Modrinth

# This release workflow can only be triggered manually
on:
  workflow_dispatch:
    inputs:
      pre-release:
        default: true
        required: false
        description: Only create a pre-release GitHub release
        type: boolean
      note:
        default: ''
        required: false
        description: Additional Release Note (will be printf to the head of release message, use "\n" to switch line)
        type: string

env:
  JAVA_VERSION: '17'
  UPLOAD_PATH: upload
  CHANGELOG_FILE_PATH: ./doc/CHANGELOG.md
  MOD_COMPATIBILITY_INFO_FILE_PATH: ./doc/MOD_COMPATIBILITY.md
  # Release message for github release
  CHANGELOG_TEMP_GITHUB: .changelog_github.md
  # Release message for modrinth, curseforge
  CHANGELOG_TEMP_PLATFORM: .changelog_platform.md

jobs:
  # Test and Build the Mod
  test-and-build:
    uses: ./.github/workflows/build.yml
    with:
      jdk-version: ${{ inputs.jdk-version || '17' }}
      build-files-cache-key: ${{ github.run_id }}

  publish:
    needs: test-and-build
    permissions:
      # Assigning repo "write" permissions to this workflow
      # ref: https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-contents
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Restore Cached Mod Files
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.UPLOAD_PATH }}
          key: ${{ github.run_id }}

      # Get version information from gradle.properties and set them as environment variables
      # MINECRAFT_VERSION: 1.20.4
      # MOD_GAME_VERSION: 1.5.2+1.20.4
      # MOD_VERSION: 1.5.2
      # GIT_VERSION_TAG: v1.5.2-1.20.4
      - name: Prepare Environment Variables
        run: |
          echo "MINECRAFT_VERSION=$(grep "minecraft_version" gradle.properties | cut -d'=' -f2)" >> $GITHUB_ENV
          echo "MOD_GAME_VERSION=$(grep "mod_version" gradle.properties | cut -d'=' -f2)" >> $GITHUB_ENV
          echo "MOD_VERSION=$(echo ${{ env.MOD_GAME_VERSION }} | cut -d'+' -f1)" >> $GITHUB_ENV
          echo "GIT_VERSION_TAG"="v$(echo ${{ env.MOD_GAME_VERSION }} | sed 's/+/-/')" >> $GITHUB_ENV

      # Create temp changelog files, add release note from input and documentation files
      # Extract changelog from CHANGELOG.md, match content between two "*Release*" lines
      # Extract mod compatibility info from MOD_COMPATIBILITY.md, match content between two "Compatibility For" lines
      #
      # Release message for github release
      # note + changelog + mod compatibility
      #
      # Release message for modrinth, curseforge
      # note + changelog
      - name: Prepare Release Messages
        run: |
          touch ${{ env.CHANGELOG_TEMP_GITHUB }}
          if [ "${{ inputs.note }}" != '' ] ; then printf "${{ inputs.note }}" >> ${{ env.CHANGELOG_TEMP_GITHUB }} ; fi
          awk '/-{3,}/{flag=1;next}/Release/{if (flag==1)exit}flag' \
            ${{ env.CHANGELOG_FILE_PATH }} >> \
            ${{ env.CHANGELOG_TEMP_GITHUB }}
          printf "### Mod Version Compatibility" >> ${{ env.CHANGELOG_TEMP_GITHUB }}
          awk '/Compatibility For ${{ env.MINECRAFT_VERSION }}/{flag=1;next}/----/{next}/Compatibility For/{if (flag==1)exit}flag' \
            ${{ env.MOD_COMPATIBILITY_INFO_FILE_PATH }} \
            >> ${{ env.CHANGELOG_TEMP_GITHUB }}
          
          touch ${{ env.CHANGELOG_TEMP_PLATFORM }}
          if [ "${{ inputs.note }}" != '' ] ; then printf "${{ inputs.note }}\n" >> ${{ env.CHANGELOG_TEMP_PLATFORM }} ; fi
          awk '/-{3,}/{flag=1;next}/Release/{if (flag==1)exit}flag' \
            ${{ env.CHANGELOG_FILE_PATH }} >> \
            ${{ env.CHANGELOG_TEMP_PLATFORM }}

      - name: Create Github Release
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          github-tag: ${{ env.GIT_VERSION_TAG }}
          github-generate-changelog: true
          github-prerelease: ${{ inputs.pre-release }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ env.UPLOAD_PATH }}/*.jar
          name: Release v${{ env.MOD_VERSION }} for ${{ env.MINECRAFT_VERSION }} [Fabric/Forge]
          changelog-file: ${{ env.CHANGELOG_TEMP_PLATFORM }}